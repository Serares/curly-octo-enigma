// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: answers.sql

package db

import (
	"context"
	"time"
)

const createAnswer = `-- name: CreateAnswer :exec
INSERT INTO answers (
        id,
        question_id,
        content,
        upvotes,
        downvotes,
        created_at,
        updated_at
    )
VALUES(?, ?, ?, ?, ?, ?, ?)
`

type CreateAnswerParams struct {
	ID         string
	QuestionID string
	Content    string
	Upvotes    int64
	Downvotes  int64
	CreatedAt  time.Time
	UpdatedAt  time.Time
}

func (q *Queries) CreateAnswer(ctx context.Context, arg CreateAnswerParams) error {
	_, err := q.db.ExecContext(ctx, createAnswer,
		arg.ID,
		arg.QuestionID,
		arg.Content,
		arg.Upvotes,
		arg.Downvotes,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteAnswer = `-- name: DeleteAnswer :exec
DELETE FROM answers
WHERE id = ?
`

func (q *Queries) DeleteAnswer(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteAnswer, id)
	return err
}

const downvoteAnswer = `-- name: DownvoteAnswer :exec
UPDATE answers
SET downvotes = downvotes + 1
WHERE id = ?
`

func (q *Queries) DownvoteAnswer(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, downvoteAnswer, id)
	return err
}

const getAnswer = `-- name: GetAnswer :one
SELECT id, question_id, content, upvotes, downvotes, created_at, updated_at
FROM answers
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetAnswer(ctx context.Context, id string) (Answer, error) {
	row := q.db.QueryRowContext(ctx, getAnswer, id)
	var i Answer
	err := row.Scan(
		&i.ID,
		&i.QuestionID,
		&i.Content,
		&i.Upvotes,
		&i.Downvotes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAnswersByQuestionID = `-- name: GetAnswersByQuestionID :many
SELECT id, question_id, content, upvotes, downvotes, created_at, updated_at
FROM answers
WHERE question_id = ?
ORDER BY created_at DESC
`

func (q *Queries) GetAnswersByQuestionID(ctx context.Context, questionID string) ([]Answer, error) {
	rows, err := q.db.QueryContext(ctx, getAnswersByQuestionID, questionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Answer
	for rows.Next() {
		var i Answer
		if err := rows.Scan(
			&i.ID,
			&i.QuestionID,
			&i.Content,
			&i.Upvotes,
			&i.Downvotes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAnswers = `-- name: ListAnswers :many
SELECT id, question_id, content, upvotes, downvotes, created_at, updated_at
FROM answers
ORDER BY created_at DESC
`

func (q *Queries) ListAnswers(ctx context.Context) ([]Answer, error) {
	rows, err := q.db.QueryContext(ctx, listAnswers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Answer
	for rows.Next() {
		var i Answer
		if err := rows.Scan(
			&i.ID,
			&i.QuestionID,
			&i.Content,
			&i.Upvotes,
			&i.Downvotes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upvoteAnswer = `-- name: UpvoteAnswer :exec
UPDATE answers
SET upvotes = upvotes + 1
WHERE id = ?
`

func (q *Queries) UpvoteAnswer(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, upvoteAnswer, id)
	return err
}
